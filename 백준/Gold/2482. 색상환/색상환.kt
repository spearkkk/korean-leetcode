fun readStr() = readln()
fun readStrings() = readStr().split(" ")
fun readInt() = readStr().toInt()
fun readInts() = readStrings().map { it.toInt() }

fun main() {
    /**
     * 4
     * 1, 2, 3, 4
     * 0 -> 0
     * 1 -> 4
     * 2 -> (1, 3), (2, 4): 2
     * 3 -> 0
     * 4 -> 0
     * ===
     * 5
     * 1, 2, 3, 4, 5
     * 0 -> 0
     * 1 -> 5
     * 2 -> (1, 3), (1, 4), (2, 4), (2, 5), (3, 5): 5
     * 3 -> 0
     * 4 -> 0
     * 5 -> 0
     * ===
     * 6
     * 1, 2, 3, 4, 5, 6
     * 0 -> 0
     * 1 -> 6
     * 2 -> (1, 3), (1, 4), (1, 5), (2, 4), (2, 5), (2, 6), (3, 5), (3, 6), (4, 6): 9
     * 3 -> (1, 3, 5), (2, 4, 6): 2
     * 4 -> 0
     * 5 -> 0
     * 6 -> 0
     * ===
     * 7
     * 1, 2, 3, 4, 5, 6, 7
     * 0 -> 0
     * 1 -> 7
     * 2 -> (1, 3), (1, 4), (1, 5), (1, 6), (2, 4), (2, 5), (2, 6), (2, 7), (3, 5), (3, 6), (3, 7), (4, 6), (4, 7), (5, 7): 14
     * 3 -> (1, 3, 5), (1, 3, 6), (1, 4, 6), (2, 4, 6), (2, 4, 7), (2, 5, 7), (3, 5, 7): 7
     * 4 -> 0
     * 5, 6, 7 -> 0
     * ===
     * 8
     * 1, 2, 3, 4, 5, 6, 7, 8
     * 3 -> (1, 3, 5), (1, 3, 6), (1, 3, 7), (1, 4, 6), (1, 4, 7), (1, 5, 7), (2, 4, 6), (2, 4, 7), (2, 4, 8), (2, 5, 7), (2, 5, 8), (2, 6, 8)
     *  (3, 5, 7), (3, 5, 8), (3, 6, 8), (4, 6, 8): 16
     * 4 --> (1, 3, 5, 7), (2, 4, 6, 8): 2
     * ===
     * dp[n][k]: n의 색생환에서 k개의 색을 사용하여 나타낼 수 있는 조합의 수
     * dp[n][1] = n
     * dp[n][2] = dp[n - 1][2] + dp[n - 2][1]
     * dp[n][3] = dp[n - 1][3] + dp[n - 2][2]
     *
     * dp[n][k] = dp[n - 1][k] + dp[n - 2][k - 1] (n / 2 >= k)
     */

    val n = readInt()
    val k = readInt()

    val mod = 1_000_000_003

    if (n / 2 < k) {
        println(0)
        return
    }
    if (k == 1) {
        println(n)
        return
    }

    val dp = Array(n + 1) { IntArray(n + 1) }
    for (i in 1 .. n) {
        for (j in 1 .. i / 2) {
            if (j == 1) {
                dp[i][j] = i
                continue
            }
            dp[i][j] = (dp[i - 1][j] + dp[i - 2][j - 1]) % mod
        }
    }

    println(dp[n][k])
}